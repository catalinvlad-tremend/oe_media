<?php

/**
 * @file
 * OpenEuropa Media module.
 */

declare(strict_types = 1);

/**
 * Implements hook_media_source_info_alter().
 *
 * Adding Daily Motion to the list of providers
 * exposed by the OEmbed video source plugin.
 */
function oe_media_media_source_info_alter(array &$sources): void {
  $sources['oembed:video']['providers'] = ['YouTube', 'Vimeo', 'Dailymotion'];
}

/**
 * Implements hook_file_download().
 *
 * Allow file downloading only if user have view access to parent entity (node).
 */
function oe_media_file_download($uri) {
  $entity_type_manager = \Drupal::entityTypeManager();
  /* @var \Drupal\file\FileInterface[] $files */
  $files = $entity_type_manager
    ->getStorage('file')
    ->loadByProperties(['uri' => $uri]);

  if (count($files)) {
    foreach ($files as $item) {
      // Since some database servers sometimes use a case-insensitive comparison
      // by default, double check that the filename is an exact match.
      if ($item->getFileUri() === $uri) {
        $file = $item;
        break;
      }
    }
  }
  if (!isset($file)) {
    return;
  }

  // Find out if a temporary file is still used in the system.
  if ($file->isTemporary()) {
    $usage = \Drupal::service('file.usage')->listUsage($file);
    if (empty($usage) && $file->getOwnerId() != \Drupal::currentUser()->id()) {
      // Deny access to temporary files without usage that are not owned by the
      // same user. This prevents the security issue that a private file that
      // was protected by field permissions becomes available after its usage
      // was removed and before it is actually deleted from the file system.
      // Modules that depend on this behavior should make the file permanent
      // instead.
      return -1;
    }
  }

  $usage_list = \Drupal::service('file.usage')->listUsage($file);

  if ($file->isPermanent()) {
    $referencing_entity_is_accessible = FALSE;
    $references = $usage_list['file'] ?? [];
    $media_ids = !empty($references['media']) ? array_keys($references['media']) : NULL;

    if (empty($media_ids)) {
      return;
    }

    // Getting fields which could have references to 'document' media type.
    $fields = $entity_type_manager->getStorage('field_config')->loadByProperties([
      'entity_type' => 'node',
      'field_type' => 'entity_reference',
    ]);

    $field_referenced_to_media = [];
    /** @var \Drupal\field\Entity\FieldConfig $field */
    foreach ($fields as $field) {
      $field_settings = $field->getSettings();
      if ($field_settings['handler'] === 'default:media' && in_array('document', $field_settings['handler_settings']['target_bundles'])) {
        $field_referenced_to_media[] = $field->getName();
      }
    }

    $query = \Drupal::entityQuery('node', 'OR');
    foreach ($field_referenced_to_media as $field_name) {
      $query->condition($field_name, $media_ids);
    }
    $nodes = $query->execute();

    $referencing_node_entities = $entity_type_manager->getStorage('node')->loadMultiple(array_keys($nodes));

    foreach ($referencing_node_entities as $node_entity) {
      if ($node_entity->access('view', NULL, TRUE)->isAllowed()) {
        $referencing_entity_is_accessible = TRUE;
      }
    }

    if (!$referencing_entity_is_accessible) {
      return -1;
    }
  }

  // Access is granted.
  $headers = file_get_content_headers($file);
  return $headers;
}
