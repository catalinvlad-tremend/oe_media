<?php

/**
 * @file
 * OpenEuropa Media module.
 */

declare(strict_types = 1);

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\node\NodeInterface;

/**
 * Implements hook_media_source_info_alter().
 *
 * Adding Daily Motion to the list of providers
 * exposed by the OEmbed video source plugin.
 */
function oe_media_media_source_info_alter(array &$sources): void {
  $sources['oembed:video']['providers'] = ['YouTube', 'Vimeo', 'Dailymotion'];
}

/**
 * Implements hook_ENTITY_TYPE_access().
 *
 * Check access to nodes with referencies to document media types.
 */
function oe_media_media_access(EntityInterface $entity, string $operation, AccountInterface $account) {
  if ($entity->bundle() !== 'document' || $operation !== 'view') {
    return AccessResult::neutral()->cachePerUser();
  }

  $entity_type_manager = \Drupal::entityTypeManager();

  // Getting fields which could have references to 'document' media type.
  // @TODO Check impact with possible usage of 'Entity Usage' module.
  $fields = $entity_type_manager->getStorage('field_config')->loadByProperties([
    'entity_type' => 'node',
    'field_type' => 'entity_reference',
  ]);

  $field_referenced_to_media = [];
  /** @var \Drupal\field\Entity\FieldConfig $field */
  foreach ($fields as $field) {
    $field_settings = $field->getSettings();
    if ($field_settings['handler'] === 'default:media' && in_array('document', $field_settings['handler_settings']['target_bundles'])) {
      $field_referenced_to_media[] = $field->getName();
    }
  }

  // Get all nodes which use this media entity.
  $query = \Drupal::entityQuery('node', 'OR');
  foreach ($field_referenced_to_media as $field_name) {
    $query->condition($field_name, $entity->id());
  }
  $nodes = $query->execute();

  if (!$nodes) {
    return AccessResult::neutral()->cachePerUser();
  }

  $referencing_node_entities = $entity_type_manager->getStorage('node')->loadMultiple(array_keys($nodes));

  $referencing_entity_is_accessible = FALSE;
  $accessible_node = FALSE;
  // Check access to parent nodes.
  foreach ($referencing_node_entities as $node_entity) {
    if ($node_entity->access('view', NULL, TRUE)->isAllowed()) {
      $referencing_entity_is_accessible = TRUE;
      $accessible_node = $node_entity;
      // Break, if user have access at least to one node.
      break;
    }
  }

  $access_result = AccessResult::forbiddenIf($referencing_entity_is_accessible === FALSE);

  if ($accessible_node instanceof NodeInterface) {
    $access_result->addCacheableDependency($accessible_node)->cachePerUser();
  }
  else {
    $access_result->addCacheContexts(['user', 'node_list']);
  }

  return $access_result;
}
